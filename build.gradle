buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.4'
    }
}

allprojects {
  repositories {
      google()
      mavenCentral()
  }
}

apply plugin: 'com.android.application'

task "generatePngs"() {
    group = 'Custom'

    mkdir layout.buildDirectory.dir('generated_resources')
    ["mipmap-mdpi", "mipmap-hdpi", "mipmap-xhdpi", "mipmap-xxhdpi", "mipmap-xxxhdpi", ].each {
        mkdir layout.buildDirectory.dir("generated_resources/${it}")
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "wivrn.svg", "-w", "48", "-h", "48", "-o", layout.buildDirectory.file('generated_resources/mipmap-mdpi/ic_wivrn_launcher.png').get().asFile ]
        workingDir 'images'
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "wivrn.svg", "-w", "72", "-h", "72", "-o", layout.buildDirectory.file('generated_resources/mipmap-hdpi/ic_wivrn_launcher.png').get().asFile ]
        workingDir 'images'
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "wivrn.svg", "-w", "96", "-h", "96", "-o", layout.buildDirectory.file('generated_resources/mipmap-xhdpi/ic_wivrn_launcher.png').get().asFile ]
        workingDir 'images'
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "wivrn.svg", "-w", "144", "-h", "144", "-o", layout.buildDirectory.file('generated_resources/mipmap-xxhdpi/ic_wivrn_launcher.png').get().asFile ]
        workingDir 'images'
    }

    exec {
        executable = 'rsvg-convert'
        args = [ "wivrn.svg", "-w", "192", "-h", "192", "-o", layout.buildDirectory.file('generated_resources/mipmap-xxxhdpi/ic_wivrn_launcher.png').get().asFile ]
        workingDir 'images'
    }
}

android {
    namespace "org.meumeu.wivrn"
    ndkVersion "26.1.10909125"

    defaultConfig {
        applicationId "org.meumeu.wivrn"
        // for Vulkan, need at least 24
        // for AImage_getHardwareBuffer, API 26
        minSdkVersion 29
        compileSdkVersion 29

        versionName = "1.0"
        versionCode = 1

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_static', '-DCMAKE_ANDROID_NDK_VERSION=' + ndkVersion, '-DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON', '-DCMAKE_EXPORT_COMPILE_COMMANDS=ON', '-DWIVRN_USE_SYSTEM_FREETYPE=OFF', '-DWIVRN_BUILD_CLIENT=ON', '-DWIVRN_BUILD_SERVER=OFF', '-DWIVRN_WERROR=ON'
                resValue "string", "app_name", "WiVRn"
            }
        }
    }

    signingConfigs {
        if (project.hasProperty("signingKeyPassword")) {
            release {
                storeFile file("ks.keystore")
                keyAlias "default_key"
                storePassword signingKeyPassword // Set in gradle.properties
                keyPassword signingKeyPassword
                enableV2Signing true
            }
        }
    }

    buildTypes {
        if (project.hasProperty("signingKeyPassword")) {
            release {
                signingConfig signingConfigs.release
            }
        }

        releaseDebugable {
            initWith release
            debuggable true
        }

        debugWithValidationLayer {
            initWith debug
            externalNativeBuild {
                cmake {
                    arguments '-DUSE_ANDROID_VALIDATION_LAYER=ON'
                }
            }
        }
    }

    flavorDimensions "device"

    productFlavors {
        pico {
            dimension "device"
            externalNativeBuild {
                cmake {
                    abiFilters 'arm64-v8a'
                    arguments '-DPICO=ON'
                }
            }
        }
        standard {
            dimension "device"
            externalNativeBuild {
                cmake {
                    abiFilters 'arm64-v8a'//, 'x86_64'
                    arguments '-DANDROID_STL=c++_shared'
                }
            }
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            res.srcDirs = [ 'resources', layout.buildDirectory.dir('generated_resources') ]

            assets.srcDir 'assets'
        }
    }

    externalNativeBuild {
        cmake {
            version '3.22.1'
            path    'CMakeLists.txt'
        }
    }

    applicationVariants.all { variant ->
        tasks["assemble${variant.name.capitalize()}"].finalizedBy "generatePngs"
    }
}
