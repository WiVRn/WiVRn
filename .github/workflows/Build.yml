name: Build

on:
  push:
    branches: [ "master" ]
    tags: "*"
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-server:
    name: Build the WiVRn server
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: >
        sudo apt-get update && sudo apt-get install libvulkan-dev libcjson-dev libx264-dev libavcodec-dev libavutil-dev libswscale-dev libavfilter-dev libbsd-dev libavahi-client-dev libeigen3-dev glslang-tools libudev-dev libwayland-dev libx11-xcb-dev libxrandr-dev libxcb-randr0-dev libgl-dev libglx-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libsystemd-dev libva-dev nlohmann-json3-dev libpulse-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr -DWIVRN_BUILD_CLIENT=OFF -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  build-test-client:
    name: Build the WiVRn client for Linux
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install dependencies
      run: >
        sudo apt-get update && sudo apt-get install libvulkan-dev libcjson-dev libx264-dev libavcodec-dev libavutil-dev libswscale-dev libavfilter-dev libbsd-dev libavahi-client-dev libeigen3-dev glslang-tools libudev-dev libwayland-dev libx11-xcb-dev libxrandr-dev libxcb-randr0-dev libgl-dev libglx-dev mesa-common-dev libgl1-mesa-dev libglu1-mesa-dev libsystemd-dev libva-dev libopenxr-dev

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=/usr -DWIVRN_BUILD_SERVER=OFF -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

  build-android-pico:
    name: Build the WiVRn client for Pico >5.4
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true
      - name: Checkout LFS objects
        run: git lfs checkout

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Install dependencies
        run: >
          sudo apt-get update && sudo apt-get install glslang-tools

      - name: Secrets
        if: ${{ github.event_name != 'pull_request' }}
        env:
          APK_SIGNINGKEYPASSWORD: ${{ secrets.APK_SIGNINGKEYPASSWORD }}
          APK_KEYSTORE_BASE64: ${{ secrets.APK_KEYSTORE_BASE64 }}
        run: |
          echo signingKeyPassword="$APK_SIGNINGKEYPASSWORD" > gradle.properties
          echo "$APK_KEYSTORE_BASE64" | base64 --decode --ignore-garbage > ks.keystore

      - name: Build (debug only)
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          chmod +x gradlew
          ./gradlew assemblePicoDebug assemblePicoDebugWithValidationLayer

      - name: Build
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          chmod +x gradlew
          ./gradlew assemblePico

      - name: Prepare before archiving artifacts
        run: |
          mkdir apk
          mv $(find build/outputs/apk/ -name "*.apk") apk/

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: APK
          path: apk/*.apk

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ inputs.ref }}
          generate_release_notes: true
          draft: true
          files: |
            apk/WiVRn-pico-release.apk
  build-android-standard:
    name: Build the WiVRn client for the standard OpenXR loader
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        lfs: true
    - name: Checkout LFS objects
      run: git lfs checkout

    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Install dependencies
      run: >
        sudo apt-get update && sudo apt-get install glslang-tools

    - name: Secrets
      if: ${{ github.event_name != 'pull_request' }}
      env:
        APK_SIGNINGKEYPASSWORD: ${{ secrets.APK_SIGNINGKEYPASSWORD }}
        APK_KEYSTORE_BASE64: ${{ secrets.APK_KEYSTORE_BASE64 }}
      run: |
        echo signingKeyPassword="$APK_SIGNINGKEYPASSWORD" > gradle.properties
        echo "$APK_KEYSTORE_BASE64" | base64 --decode --ignore-garbage > ks.keystore

    - name: Build (debug only)
      if: ${{ github.event_name == 'pull_request' }}
      run: |
        chmod +x gradlew
        ./gradlew assembleStandardDebug assembleStandardDebugWithValidationLayer

    - name: Build
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        chmod +x gradlew
        ./gradlew assembleStandard

    - name: Prepare before archiving artifacts
      run: |
        mkdir apk
        mv $(find build/outputs/apk/ -name "*.apk") apk/

    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: APK
        path: apk/*.apk

    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        tag_name: ${{ inputs.ref }}
        generate_release_notes: true
        draft: true
        files: |
          apk/WiVRn-release.apk
